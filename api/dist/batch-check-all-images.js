"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prisma_1 = require("./prisma");
const nsfw_1 = require("./nsfw");
const axios_1 = __importDefault(require("axios"));
async function batchCheckAllImages() {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n");
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NSFW –º–æ–¥–µ–ª—å
    await (0, nsfw_1.initializeNsfwModel)();
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        const profiles = await prisma_1.prisma.profile.findMany({
            where: {
                images: {
                    isEmpty: false
                }
            },
            select: {
                id: true,
                preferredName: true,
                images: true,
                imageData: true
            }
        });
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${profiles.length}\n`);
        let totalImages = 0;
        let checkedImages = 0;
        let nsfwFound = 0;
        let errors = 0;
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
        for (const profile of profiles) {
            console.log(`\nüë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å: ${profile.preferredName} (${profile.id})`);
            console.log(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ: ${profile.images.length}`);
            console.log(`   –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ Image: ${profile.imageData.length}`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            for (let i = 0; i < profile.images.length; i++) {
                const imageUrl = profile.images[i];
                totalImages++;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Image –¥–ª—è —ç—Ç–æ–≥–æ URL
                const existingRecord = profile.imageData.find(img => img.url === imageUrl);
                if (existingRecord) {
                    console.log(`   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${imageUrl}`);
                    if (existingRecord.isNsfw)
                        nsfwFound++;
                    continue;
                }
                try {
                    console.log(`   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${imageUrl}`);
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    const response = await axios_1.default.get(imageUrl, {
                        responseType: 'arraybuffer',
                        timeout: 30000
                    });
                    const imageBuffer = Buffer.from(response.data);
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NSFW
                    const nsfwResult = await (0, nsfw_1.checkImageNsfw)(imageBuffer);
                    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Image
                    const newImage = await prisma_1.prisma.image.create({
                        data: {
                            profileId: profile.id,
                            url: imageUrl,
                            order: i,
                            isNsfw: nsfwResult.isNsfw,
                            nsfwScore: nsfwResult.score,
                            nsfwCategories: nsfwResult.predictions,
                            format: imageUrl.split('.').pop()?.toLowerCase() || 'jpg'
                        }
                    });
                    checkedImages++;
                    if (nsfwResult.isNsfw) {
                        nsfwFound++;
                        console.log(`   ‚ö†Ô∏è  NSFW –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! Score: ${nsfwResult.score}`);
                    }
                    else {
                        console.log(`   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
                    }
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
                catch (error) {
                    errors++;
                    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, error instanceof Error ? error.message : error);
                }
            }
        }
        console.log("\n\nüìä === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
        console.log(`–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalImages}`);
        console.log(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–æ–≤—ã—Ö: ${checkedImages}`);
        console.log(`–ù–∞–π–¥–µ–Ω–æ NSFW: ${nsfwFound}`);
        console.log(`–û—à–∏–±–æ–∫: ${errors}`);
        console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç NSFW: ${totalImages > 0 ? ((nsfwFound / totalImages) * 100).toFixed(2) : 0}%`);
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const nsfwImages = await prisma_1.prisma.image.findMany({
            where: { isNsfw: true },
            select: {
                nsfwScore: true,
                nsfwCategories: true
            }
        });
        if (nsfwImages.length > 0) {
            console.log("\nüìà === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û NSFW ===");
            const avgScore = nsfwImages.reduce((sum, img) => sum + (img.nsfwScore || 0), 0) / nsfwImages.length;
            console.log(`–°—Ä–µ–¥–Ω–∏–π NSFW score: ${avgScore.toFixed(3)}`);
            // –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const categoryCount = {};
            nsfwImages.forEach(img => {
                if (img.nsfwCategories && Array.isArray(img.nsfwCategories)) {
                    img.nsfwCategories.forEach((pred) => {
                        const category = pred.className?.toLowerCase();
                        if (category && ['porn', 'hentai', 'sexy'].includes(category)) {
                            categoryCount[category] = (categoryCount[category] || 0) + 1;
                        }
                    });
                }
            });
            console.log("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ NSFW:");
            Object.entries(categoryCount).forEach(([category, count]) => {
                console.log(`  - ${category}: ${count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
            });
        }
    }
    catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    }
    finally {
        await prisma_1.prisma.$disconnect();
    }
}
// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
batchCheckAllImages()
    .then(() => {
    console.log("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    process.exit(0);
})
    .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", error);
    process.exit(1);
});
