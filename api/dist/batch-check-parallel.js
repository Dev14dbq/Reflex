"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prisma_1 = require("./prisma");
const nsfw_1 = require("./nsfw");
const axios_1 = __importDefault(require("axios"));
// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
const PARALLEL_LIMIT = 5;
async function processImageBatch(images) {
    let checked = 0;
    let nsfw = 0;
    let errors = 0;
    const promises = images.map(async ({ url, profileId, order }) => {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const response = await axios_1.default.get(url, {
                responseType: 'arraybuffer',
                timeout: 30000
            });
            const imageBuffer = Buffer.from(response.data);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NSFW
            const nsfwResult = await (0, nsfw_1.checkImageNsfw)(imageBuffer);
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Image
            await prisma_1.prisma.image.create({
                data: {
                    profileId,
                    url,
                    order,
                    isNsfw: nsfwResult.isNsfw,
                    nsfwScore: nsfwResult.score,
                    nsfwCategories: nsfwResult.predictions,
                    format: url.split('.').pop()?.toLowerCase() || 'jpg'
                }
            });
            checked++;
            if (nsfwResult.isNsfw) {
                nsfw++;
                console.log(`‚ö†Ô∏è  NSFW: ${url} (score: ${nsfwResult.score})`);
            }
            else {
                console.log(`‚úÖ Safe: ${url}`);
            }
        }
        catch (error) {
            errors++;
            console.error(`‚ùå Error: ${url} -`, error instanceof Error ? error.message : error);
        }
    });
    await Promise.all(promises);
    return { checked, nsfw, errors };
}
async function batchCheckParallel() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ NSFW...\n");
    console.log(`‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: ${PARALLEL_LIMIT}\n`);
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NSFW –º–æ–¥–µ–ª—å
    await (0, nsfw_1.initializeNsfwModel)();
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
        const profiles = await prisma_1.prisma.profile.findMany({
            where: {
                images: {
                    isEmpty: false
                }
            },
            include: {
                imageData: {
                    select: { url: true }
                }
            }
        });
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const imagesToCheck = [];
        for (const profile of profiles) {
            // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ Image
            const checkedUrls = new Set(profile.imageData.map(img => img.url));
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
            profile.images.forEach((url, index) => {
                if (!checkedUrls.has(url)) {
                    imagesToCheck.push({
                        url,
                        profileId: profile.id,
                        order: index
                    });
                }
            });
        }
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${imagesToCheck.length}\n`);
        if (imagesToCheck.length === 0) {
            console.log("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!");
            return;
        }
        let totalChecked = 0;
        let totalNsfw = 0;
        let totalErrors = 0;
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏
        for (let i = 0; i < imagesToCheck.length; i += PARALLEL_LIMIT) {
            const batch = imagesToCheck.slice(i, i + PARALLEL_LIMIT);
            console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${Math.floor(i / PARALLEL_LIMIT) + 1}/${Math.ceil(imagesToCheck.length / PARALLEL_LIMIT)}`);
            const results = await processImageBatch(batch);
            totalChecked += results.checked;
            totalNsfw += results.nsfw;
            totalErrors += results.errors;
            // –ü—Ä–æ–≥—Ä–µ—Å—Å
            const progress = ((i + batch.length) / imagesToCheck.length * 100).toFixed(1);
            console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
        }
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log("\n\nüìä === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
        console.log(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalChecked}`);
        console.log(`–ù–∞–π–¥–µ–Ω–æ NSFW: ${totalNsfw}`);
        console.log(`–û—à–∏–±–æ–∫: ${totalErrors}`);
        console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç NSFW: ${totalChecked > 0 ? ((totalNsfw / totalChecked) * 100).toFixed(2) : 0}%`);
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ë–î
        const stats = await prisma_1.prisma.image.aggregate({
            _count: { _all: true },
            where: { isNsfw: true }
        });
        console.log(`\n–í—Å–µ–≥–æ NSFW –≤ –ë–î: ${stats._count._all}`);
    }
    catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    }
    finally {
        await prisma_1.prisma.$disconnect();
    }
}
// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
batchCheckParallel()
    .then(() => {
    console.log("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    process.exit(0);
})
    .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", error);
    process.exit(1);
});
