# Reflex Telegram Bot ‚Äì clean rewrite
# Requires aiogram v3
from __future__ import annotations

import os
import asyncio
import uuid
from collections import defaultdict
from datetime import datetime, time
from typing import Dict, List
from dotenv import load_dotenv

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InputMediaPhoto,
    Message,
    WebAppInfo,
    PhotoSize,
)

load_dotenv()

# === CONFIG ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE = os.getenv("api_url") or "https://spectrmod.ru/api"
WEBAPP_URL = "https://kash-dev-reflex.vercel.app/"  # –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Web-App –∫–Ω–æ–ø–∫—É
SUPPORT_USERNAME = "spectrmod"  # @spectrmod
INTRO_PICTURE = "https://s.iimg.su/s/18/3dr82mIVRK6ojKvPQH2OBcYEM4pStJ0zrTo2USQ6.png"

# Admins who can run maintenance commands
ADMIN_IDS = {8072408248, 7001269338, 8186814795}

# Endpoints
PROFILE_BY_TG_URL = f"{API_BASE}/profile/by-telegram/{{telegram_id}}"
UPLOAD_URL = f"{API_BASE}/profile/add-media"
# –†–µ–∫–ª–∞–º–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
AD_SERVE_URL = f"{API_BASE}/advertising/serve"
AD_IMPRESSION_URL = f"{API_BASE}/advertising/track/impression"
AD_CLICK_URL = f"{API_BASE}/advertising/track/click"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- Runtime storage for multi-step image uploads ---
class UploadState:
    mode: str  # "upload"
    images: List[str]
    def __init__(self):
        self.mode = "upload"
        self.images = []

user_states: Dict[int, UploadState] = {}
media_groups: defaultdict[str, List[Message]] = defaultdict(list)

# –°—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã –≤ –ø–æ–∏—Å–∫–µ
user_actions: defaultdict[int, int] = defaultdict(int)

# === Helpers ===
async def fetch_profile(tg_id: int) -> dict | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π), –ª–∏–±–æ None."""
    url = PROFILE_BY_TG_URL.format(telegram_id=tg_id)
    try:
        async with aiohttp.ClientSession() as sess:
            async with sess.get(url, timeout=aiohttp.ClientTimeout(total=5)) as resp:
                data = await resp.json()
                return data.get("profile") if data.get("exists") else None
    except Exception:
        return None

async def get_admin_token(tg_id: int) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∞
        token = await create_webapp_session(tg_id)
        return token
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

async def create_webapp_session(tg_id: int) -> str:
    token = str(uuid.uuid4())
    # POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —É–±—Ä–∞–Ω
    return token

# === –†–µ–∫–ª–∞–º–∞ ===
async def get_advertisement(user_id: int) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å API."""
    try:
        async with aiohttp.ClientSession() as sess:
            async with sess.get(
                AD_SERVE_URL, 
                params={"userId": user_id},
                timeout=aiohttp.ClientTimeout(total=5)
                          ) as resp:
                  data = await resp.json()
                  print(f"[DEBUG] –†–µ–∫–ª–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")
                  return data.get("ad") if data.get("ad") else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã: {e}")
        return None

async def get_advertisement_by_id(campaign_id: str) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–µ–∫–ª–∞–º—É –ø–æ ID –∫–∞–º–ø–∞–Ω–∏–∏."""
    try:
        async with aiohttp.ClientSession() as sess:
            async with sess.get(
                f"{API_BASE}/advertising/campaign/{campaign_id}/ad",
                timeout=aiohttp.ClientTimeout(total=5)
            ) as resp:
                data = await resp.json()
                return data.get("ad") if data.get("ad") else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –ø–æ ID: {e}")
        return None

async def track_ad_impression(campaign_id: str, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã."""
    try:
        payload = {"campaignId": campaign_id, "userId": user_id}
        async with aiohttp.ClientSession() as sess:
            await sess.post(AD_IMPRESSION_URL, json=payload, timeout=aiohttp.ClientTimeout(total=3))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–æ–∫–∞–∑–∞: {e}")

async def track_ad_click(campaign_id: str, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–∞ –ø–æ —Ä–µ–∫–ª–∞–º–µ."""
    try:
        payload = {"campaignId": campaign_id, "userId": user_id}
        async with aiohttp.ClientSession() as sess:
            await sess.post(AD_CLICK_URL, json=payload, timeout=aiohttp.ClientTimeout(total=3))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∫–ª–∏–∫–∞: {e}")

async def send_advertisement(chat_id: int, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç."""
    ad = await get_advertisement(user_id)
    if not ad:
        return False
    
    try:
        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∫–ª–∞–º—É ID={ad['id']}, title={ad.get('title')}, buttonUrl={ad.get('buttonUrl')}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç—Ä–µ–∫–∏–Ω–≥–æ–º –∫–ª–∏–∫–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=ad.get("buttonText", "–ü–µ—Ä–µ–π—Ç–∏"),
                callback_data=f"ad_click:{ad['id']}"
            )]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É
        if ad.get("imageUrl"):
            await bot.send_photo(
                chat_id=chat_id,
                photo=ad["imageUrl"],
                caption=f"üéØ <b>{ad.get('title', '')}</b>\n\n{ad.get('description', '')}",
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üéØ <b>{ad.get('title', '')}</b>\n\n{ad.get('description', '')}",
                reply_markup=keyboard
            )
        
        # –¢—Ä–µ–∫–∞–µ–º –ø–æ–∫–∞–∑
        await track_ad_impression(ad["id"], user_id)
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã: {e}")
        return True

# === Handlers ===
@dp.message(CommandStart())
async def cmd_start(msg: Message):
    tg_id = msg.from_user.id
    # aiogram v3 removed Message.get_args(); parse command arguments manually
    # Message.text may look like "/start" or "/start <args>" ‚Äì
    # so split once to obtain the deep-link argument if provided.
    parts = (msg.text or "").split(maxsplit=1)
    arg = parts[1].strip() if len(parts) > 1 else ""

    # Legacy quick entry to upload flow
    if arg in {"upload", "media"}:
        user_states[tg_id] = UploadState()
        await msg.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∫–µ—Ç—ã. –ü–æ—Å–ª–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å.")
        return

    profile = await fetch_profile(tg_id)
    has_profile = bool(profile)
    session_token = await create_webapp_session(tg_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É Reply (–ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞)
    keyboard_buttons = [
        [KeyboardButton(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ]
    reply_kb = ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True, selective=True)

    # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ –∂–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π-–ø—Ä–µ–≤—å—é)
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])

    if has_profile:
        caption = (
            "<b>Reflex ‚Äî –∞–Ω–æ–Ω–∏–º–Ω—ã–π LGBüåàQ —á–∞—Ç-—Ç–∏–Ω–¥–µ—Ä</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
            "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ (1-5)\n"
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –≤–æ–ø—Ä–æ—Å—ã ‚Üí @spectrmod"
        )
    else:
        caption = (
            "<b>Reflex ‚Äî –∞–Ω–æ–Ω–∏–º–Ω—ã–π LGBüåàQ —á–∞—Ç-—Ç–∏–Ω–¥–µ—Ä</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å¬ª, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"
        )

    # 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å inline-–∫–Ω–æ–ø–∫–æ–π
    await bot.send_photo(chat_id=msg.chat.id, photo=INTRO_PICTURE, caption=caption, reply_markup=inline_kb)

    # 2) –°–ª–µ–¥–æ–º ‚Äî —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–º–µ–Ω—é
    await msg.answer("–ú–µ–Ω—é", reply_markup=reply_kb)
    
    # 3) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    await asyncio.sleep(2)
    await send_advertisement(msg.chat.id, tg_id)

#####################
# --- Photo menu ---
#####################

# Step 1: show existing photos and menu

@dp.message(F.text == "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
async def menu_upload(msg: Message):
    tg_id = msg.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ñ–æ—Ç–æ
    await maybe_show_search_ad(msg.chat.id, tg_id)
    
    profile = await fetch_profile(tg_id)

    if not profile or not profile.get("images"):
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.")
        return

    images: list[str] = profile.get("images", [])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—ã–Ω–µ—à–Ω–∏–µ —Ñ–æ—Ç–æ (–∞–ª—å–±–æ–º–æ–º, –µ—Å–ª–∏ >1)
    try:
        if len(images) > 1:
            media = [InputMediaPhoto(media=url) for url in images[:10]]  # —Ç–µ–ª–µ–≥—Ä–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 10 –Ω–∞ –∞–ª—å–±–æ–º
            await bot.send_media_group(chat_id=msg.chat.id, media=media)  # type: ignore[arg-type]
        elif images:
            await bot.send_photo(chat_id=msg.chat.id, photo=images[0])
    except Exception:
        # –ï—Å–ª–∏ —Å–ª—É—á–∏–ª–æ—Å—å —á—Ç–æ-—Ç–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ.
        pass

    remaining = max(0, 5 - len(images))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é ¬´–∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë / –Ω–∞–∑–∞–¥¬ª
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        selective=True,
    )

    await msg.answer(
        f"–£ –≤–∞—Å –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)}/5 —Ñ–æ—Ç–æ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë {remaining}.",
        reply_markup=kb,
    )

# Step 2: user chooses to add more photos

@dp.message(F.text == "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ")
async def start_upload_flow(msg: Message):
    tg_id = msg.from_user.id
    profile = await fetch_profile(tg_id)

    current_images = len(profile.get("images", [])) if profile else 0
    remaining = 5 - current_images

    if remaining <= 0:
        await msg.answer("–£ –≤–∞—Å —É–∂–µ 5 —Ñ–æ—Ç–æ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
        return

    user_states[tg_id] = UploadState()
    await msg.answer(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ {remaining} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ—Å–ª–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å.",
        reply_markup=ReplyKeyboardRemove(),
    )

# Step 3: back button returns to main menu

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(msg: Message):
    # Recreate the main menu quickly
    tg_id = msg.from_user.id
    profile = await fetch_profile(tg_id)
    session_token = await create_webapp_session(tg_id)

    keyboard_buttons = [
        [KeyboardButton(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ]
    reply_kb = ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True, selective=True)

    await msg.answer("–ú–µ–Ω—é", reply_markup=reply_kb)

# ===========================
#  Photo upload flow helpers
# ===========================

# Handle incoming photos during active upload session

@dp.message(lambda m: m.photo)
async def handle_photos(msg: Message):
    tg_id = msg.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∏–Ω–æ–≥–¥–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    await maybe_show_search_ad(msg.chat.id, tg_id)
    
    if tg_id not in user_states:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ¬ª.")
        return

    state = user_states.get(tg_id)
    if not state or state.mode != "upload":
        return  # not in upload mode

    # Collect media groups so we process the album once
    if msg.media_group_id:
        media_groups[msg.media_group_id].append(msg)
        # Wait a moment for the group to complete
        await asyncio.sleep(1.2)
        if media_groups[msg.media_group_id]:
            group = media_groups.pop(msg.media_group_id)
            for m in group:
                await _save_photo(m, state)
    else:
        await _save_photo(msg, state)

    count = len(state.images)
    await msg.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count}/5 —Ñ–æ—Ç–æ")

    if count >= 5:
        await _finish_upload(msg, state)
    else:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")]],
            resize_keyboard=True,
        )
        await msg.answer("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª.", reply_markup=kb)


@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish_manual(msg: Message):
    tg_id = msg.from_user.id
    state = user_states.get(tg_id)
    if not state or not state.images:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    await _finish_upload(msg, state)


async def _save_photo(msg: Message, state: UploadState):
    if len(state.images) >= 5:
        await msg.answer("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return

    photo: PhotoSize = msg.photo[-1]
    file = await bot.get_file(photo.file_id)
    url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    async with aiohttp.ClientSession() as sess:
        resp = await sess.post(UPLOAD_URL, json={
            "telegramId": str(msg.from_user.id),
            "imageUrl": url,
        })
        if resp.status == 200:
            state.images.append(url)
        else:
            await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def _finish_upload(msg: Message, state: UploadState):
    tg_id = msg.from_user.id
    user_states.pop(tg_id, None)

    # –í–µ—Ä–Ω—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–µ–Ω—é
    await back_to_main(msg)
    await msg.answer("üéâ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")

# --- /reset command ---

@dp.message(Command("reset"))
async def cmd_reset(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É-WebApp –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ /reset)."""
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", web_app=WebAppInfo(url=f"{WEBAPP_URL}/reset"))]]
    )
    await msg.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        reply_markup=kb,
    )

# --- notifyfix command: inform users without profile ---

@dp.message(Command("notifyfix"))
async def cmd_notifyfix(msg: Message):
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await msg.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã.")

@dp.message(Command("testads"))
async def cmd_test_ads(msg: Message):
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã.
    """
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    success = await send_advertisement(msg.chat.id, msg.from_user.id)
    if success:
        await msg.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    else:
        await msg.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã")

@dp.message(Command("broadcastads"))
async def cmd_broadcast_ads(msg: Message):
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–∫–ª–∞–º—ã.
    """
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await msg.answer("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–µ–∫–ª–∞–º—ã...")
    
    try:
        url = f"{API_BASE}/stats/all-users"
        async with aiohttp.ClientSession() as sess:
            async with sess.get(url, timeout=aiohttp.ClientTimeout(total=30)) as resp:
                data = await resp.json()
                users = data.get("users", [])
        
        sent_count = 0
        for user in users:
            try:
                tg_id = int(user.get("telegramId"))
                if await send_advertisement(tg_id, tg_id):
                    sent_count += 1
                await asyncio.sleep(0.1)
            except Exception:
                continue
        
        await msg.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Ä–µ–∫–ª–∞–º")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

@dp.message(Command("checkcampaigns"))
async def cmd_check_campaigns(msg: Message):
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–π.
    """
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    try:
        token = await get_admin_token(msg.from_user.id)
        if not token:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
            
        url = f"{API_BASE}/advertising/admin/campaigns"
        async with aiohttp.ClientSession() as sess:
            async with sess.get(
                url, 
                headers={"Authorization": f"Bearer {token}"},
                timeout=aiohttp.ClientTimeout(total=10)
            ) as resp:
                data = await resp.json()
                campaigns = data.get("campaigns", [])
        
        if not campaigns:
            await msg.answer("‚ùå –ù–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        
        status_counts = {}
        for campaign in campaigns:
            status = campaign.get("status", "unknown")
            status_counts[status] = status_counts.get(status, 0) + 1
        
        status_text = "\n".join([f"‚Ä¢ {status}: {count}" for status, count in status_counts.items()])
        
        await msg.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π:\n{status_text}\n\n–í—Å–µ–≥–æ: {len(campaigns)}")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {e}")

@dp.message(Command("approveall"))
async def cmd_approve_all(msg: Message):
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—Å–µ—Ö pending –∫–∞–º–ø–∞–Ω–∏–π.
    """
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    try:
        token = await get_admin_token(msg.from_user.id)
        if not token:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏
        url = f"{API_BASE}/advertising/admin/campaigns"
        async with aiohttp.ClientSession() as sess:
            async with sess.get(
                url, 
                headers={"Authorization": f"Bearer {token}"},
                timeout=aiohttp.ClientTimeout(total=10)
            ) as resp:
                data = await resp.json()
                campaigns = data.get("campaigns", [])
        
        pending_campaigns = [c for c in campaigns if c.get("status") == "pending"]
        
        if not pending_campaigns:
            await msg.answer("‚ùå –ù–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return
        
        await msg.answer(f"üîÑ –û–¥–æ–±—Ä—è—é {len(pending_campaigns)} –∫–∞–º–ø–∞–Ω–∏–π...")
        
        approved_count = 0
        for campaign in pending_campaigns:
            try:
                moderate_url = f"{API_BASE}/advertising/admin/campaigns/{campaign['id']}/moderate"
                async with aiohttp.ClientSession() as sess:
                    async with sess.post(
                        moderate_url, 
                        json={"action": "approve", "comment": "–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ"},
                        headers={"Authorization": f"Bearer {token}"},
                        timeout=aiohttp.ClientTimeout(total=10)
                    ) as resp:
                        if resp.status == 200:
                            approved_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign['id']}: {e}")
                continue
        
        await msg.answer(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {approved_count}")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —Ä–µ–∫–ª–∞–º–µ ===
@dp.callback_query(F.data.startswith("ad_click:"))
async def handle_ad_click(callback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏ –ø–æ —Ä–µ–∫–ª–∞–º–µ."""
    try:
        campaign_id = callback.data.split(":", 1)[1]
        user_id = callback.from_user.id
        
        print(f"[DEBUG] –ö–ª–∏–∫ –ø–æ —Ä–µ–∫–ª–∞–º–µ: campaign_id={campaign_id}, user_id={user_id}")
        
        # –¢—Ä–µ–∫–∞–µ–º –∫–ª–∏–∫
        await track_ad_click(campaign_id, user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º–µ –ø–æ ID
        ad = await get_advertisement_by_id(campaign_id)
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –ø–æ ID: {ad}")
        
        if ad and ad.get("buttonUrl"):
            await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ...", show_alert=False)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ –≤ –±–æ—Ç–µ –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
            await bot.send_message(
                callback.message.chat.id,
                f"üîó –°—Å—ã–ª–∫–∞: {ad['buttonUrl']}"
            )
        else:
            await callback.answer("–†–µ–∫–ª–∞–º–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Ä–µ–∫–ª–∞–º–µ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã –≤ –ø–æ–∏—Å–∫–µ ===
async def maybe_show_search_ad(chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É –≤ –ø–æ–∏—Å–∫–µ –∫–∞–∂–¥—ã–µ 5 –¥–µ–π—Å—Ç–≤–∏–π."""
    user_actions[user_id] += 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∫–∞–∂–¥—ã–µ 5 –¥–µ–π—Å—Ç–≤–∏–π
    if user_actions[user_id] % 5 == 0:
        await send_advertisement(chat_id, user_id)

# === –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∫–ª–∞–º—ã ===
async def daily_ad_broadcast():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∫–ª–∞–º—ã –≤ 15:00."""
    while True:
        now = datetime.now()
        target_time = now.replace(hour=15, minute=0, second=0, microsecond=0)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if now >= target_time:
            target_time = target_time.replace(day=target_time.day + 1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Ä–∞—Å—Å—ã–ª–∫–∏
        wait_seconds = (target_time - now).total_seconds()
        print(f"–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∫–ª–∞–º—ã: {target_time}")
        
        await asyncio.sleep(wait_seconds)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            url = f"{API_BASE}/stats/all-users"
            async with aiohttp.ClientSession() as sess:
                async with sess.get(url, timeout=aiohttp.ClientTimeout(total=30)) as resp:
                    data = await resp.json()
                    users = data.get("users", [])
            
            print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(users)}")
            
            sent_count = 0
            for user in users:
                try:
                    tg_id = int(user.get("telegramId"))
                    if await send_advertisement(tg_id, tg_id):
                        sent_count += 1
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.1)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get('telegramId')}: {e}")
                    continue
            
            print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Ä–µ–∫–ª–∞–º")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        
        # –ñ–¥–µ–º 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        await asyncio.sleep(86400)

# === Main ===
async def main():
    print("ü§ñ Reflex Bot starting...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–∫–ª–∞–º—ã
    asyncio.create_task(daily_ad_broadcast())
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
