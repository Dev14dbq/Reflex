#!/bin/bash

# ======================================================== #
#               –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ó–ê–ü–£–°–ö–£ –°–ö–†–ò–ü–¢–ê              #
#                                                          #
# 1. chmod +x docker.sh | –°–¥–µ–ª–∞—Ç—å —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–Ω—è–µ–º—ã–º        #
# 2. ./docker.sh | –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª                          #
# ======================================================== #

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_centered_in_box() {
    local text="$1"
    local width=50
    local border
    border=$(printf '=%.0s' $(seq 1 $width))
    local text_length=${#text}
    local padding=$(( (width - text_length) / 2 ))
    local pad_left=$(printf ' %.0s' $(seq 1 $padding))

    local pad_right=""
    if (( (width - text_length) % 2 != 0 )); then
        pad_right=" "
    fi

    echo "$border"
    echo "${pad_left}${text}${pad_right}"
    echo "$border"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–∑–∞
create_update_image() {
    echo ""
    print_centered_in_box "–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–†–ê–ó–ê–ú–ò"
    echo ""

    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–∑—ã –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:"
    docker images --format "  - {{.Repository}}:{{.Tag}}" | grep -vE '^- <none>:<none>'
    echo ""

    image_exists() {
        local name="$1"
        docker images --format "{{.Repository}}" | grep -wq "$name"
    }
    
    update_docker_image() {
        echo ""
        echo -e "- [BOT] | –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞ (\033[32m${image_name}:${image_tag}\033[0m)..."
        echo ""

        docker rmi -f ${image_name}:${image_tag} 2>/dev/null
        docker build --no-cache -t ${image_name}:${image_tag} .
    }

    create_docker_image() {
        echo ""
        echo -e "- [BOT] | –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ (\033[32m${image_name}:${image_tag}\033[0m)..."
        echo ""

        docker build -t ${image_name}:${image_tag} .
    }

    local image_name
    local image_tag

    echo '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑, –≤–≤–µ–¥—è –µ–≥–æ –∏–º—è, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑!'
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ù–∞–ø—Ä–∏–º–µ—Ä: myapp): " image_name
    read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ (–ù–∞–ø—Ä–∏–º–µ—Ä: latest): " image_tag

    image_count=$(docker images --format "  - {{.Repository}}:{{.Tag}}" | grep -vE '^- <none>:<none>' | wc -l)
        
    if [ "$image_count" -gt 0 ]; then
        for ((i=1; i<=image_count + 6; i++)); do
           echo -en "\033[1A\033[K"
        done
    fi

    if image_exists "$image_name"; then
        update_docker_image image_name image_tag
    else
        create_docker_image image_name image_tag
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
create_recreate_container() {
    echo ""
    print_centered_in_box "–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ô–ù–ï–†–ê–ú–ò"
    echo ""

    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–∑—ã –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:"
    docker images --format "  - {{.Repository}}:{{.Tag}}" | grep -vE '^- <none>:<none>'
    echo ""

    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:"
    docker ps -a --format "  - {{.Names}} ({{.Image}})" | grep -vE '^- <none>'
    echo ""

    local container_name
    local image_name
    local host_port
    local container_port

    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: myapp): " container_name
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: myapp:latest): " image_name
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç —Ö–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8080 –∏–ª–∏ 0): " host_port
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 80 –∏–ª–∏ 0): " container_port

    image_count=$(docker images --format "  - {{.Repository}}:{{.Tag}}" | grep -vE '^- <none>:<none>' | wc -l)
    con_count=$(docker ps -a --format "  - {{.Names}} ({{.Image}})" | grep -vE '^- <none>' | wc -l)

    if [ $((con_count + image_count + 8)) -gt 0 ]; then
        for ((i=1; i<=(con_count + image_count + 8); i++)); do
           echo -en "\033[1A\033[K"
        done
    fi

    echo "- [Docker] | –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${container_name}"
    echo "- [Docker] | –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞: ${image_name}"
    echo "- [Docker] | –ü–æ—Ä—Ç —Ö–æ—Å—Ç–∞: ${host_port}"
    echo "- [Docker] | –ü–æ—Ä—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${container_port}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    if docker ps -a --format '{{.Names}}' | grep -wq "$container_name"; then
        echo ""
        echo "‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–º–µ–Ω–µ–º \"$container_name\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        read -p "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π? (y/n): " remove_choice
        
        if [[ "$remove_choice" =~ ^[Yy]$ ]]; then
            docker rm -f "$container_name"
            if [ $? -eq 0 ]; then
                echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."
            else
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞."
                return 1
            fi
        else
            echo "–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
            return 1
        fi
    fi

    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if [ "$host_port" != "0" ] && [ "$container_port" != "0" ]; then
        docker run -d --restart=always --name "$container_name" -p "$host_port":"$container_port" "$image_name"
    else
        docker run -d --restart=always --name "$container_name" "$image_name"
    fi

    if [ $? -eq 0 ]; then
        echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
show_action_menu() {
    echo ""

    print_centered_in_box "–í–´–ë–û–† –î–ï–ô–°–¢–í–ò–Ø"

    echo ""
    echo "1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞–º–∏"
    echo "2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"
    echo "0. –í—ã—Ö–æ–¥"
    echo ""
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-2): " choice
    
    case $choice in
        1)
            for i in {1..11}; do
                echo -en "\033[1A\033[K"
            done

            create_update_image
            ;;
        2)
            for i in {1..10}; do
                echo -en "\033[1A\033[K"
            done

            create_recreate_container
            ;;
        0)
            exit 0
            ;;
        *)
            echo "- [BOT] | –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–±–Ω–æ—Ä—É–∂–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            show_action_menu
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    loading_animation() {
        local message="$1"
        local dots=""
        local count=0
    
        while [ $count -lt 3 ]; do
            echo -ne "\r- [BOT] | $message$dots"
            sleep 0.5
            dots="$dots."
            count=$((count + 1))
        done

        echo -ne "\r- [BOT] | $message..."
        sleep 0.5
    }

    loading_animation "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏–µ Docker"

    show_docker_download_link() {
        echo ""
        echo -e "\033[31müåê –°–∫–∞—á–∞—Ç—å Docker –º–æ–∂–Ω–æ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞:\033[0m"
        echo -e "\033[31m   https://www.docker.com/products/docker-desktop/\033[0m"
        echo ""
    }
    
    if command -v docker &> /dev/null; then
        docker_version=$(docker --version | cut -d' ' -f3 | tr -d ',')
        
        echo -e "\r- [BOT] | Docker –≤–µ—Ä—Å–∏–∏: \033[32m$docker_version\033[0m —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–∞—à–µ–º –ø–∫!"
        return 0
    else
        echo -e "\r- [BOT] | Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–∞—à–µ–º –ø–∫!"
        show_docker_download_link
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    clear

    print_docker_logo() {
        echo ""
        echo '    ____                   __                '
        echo '   / __ \  ____   _____   / /__  ___    _____'
        echo '  / / / / / __ \ / ___/  / //_/ / _ \  / ___/'
        echo ' / /_/ / / /_/ // /__   /  <   /  __/ / /    '
        echo '/_____/  \____/ \___/  /_/|_|  \___/ /_/     '
        echo ""
    }

    print_docker_logo
    print_centered_in_box "–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í DOCKER!"

    echo ""
    
    check_docker
    
    if [ $? -eq 0 ]; then
        show_action_menu
    else
        echo -e "- [BOT] | \033[31m–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞!\033[0m"
    fi
}

main