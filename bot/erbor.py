#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import telebot
import logging
import sqlite3
import threading
import time
from datetime import datetime, timedelta

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8143311268:AAEGtn7jn2vIMPHvxrcfhB59avPAB63w8bQ"

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ–æ–±—â–µ–Ω–∏—è
MAINTENANCE_MESSAGE = """
üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã

–ü—Ä–æ—Ö–æ–¥—è—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.

üôè –ü—Ä–æ—Å—å–±–∞ –Ω–µ –∑–∞–Ω–æ—Å–∏—Ç—å –±–æ—Ç–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –º—ã —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ —Ç–µ—Ö —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è!

–°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: @spectr_info

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!
"""

RESUME_MESSAGE = """
‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é!

–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start
"""

# --- üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

DB_FILE = 'users.db'

def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            registered_at TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_user(user_id, username):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
    if not c.fetchone():
        c.execute('INSERT INTO users (user_id, username, registered_at) VALUES (?, ?, ?)',
                  (user_id, username, datetime.utcnow().isoformat()))
        conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('SELECT user_id FROM users')
    users = [row[0] for row in c.fetchall()]
    conn.close()
    return users

# --- üßµ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏

def schedule_broadcast():
    def job():
        # –í—Ä–µ–º—è –ø–æ –ú–°–ö
        target_time = datetime(2025, 6, 18, 15, 0)
        while datetime.now() < target_time:
            time.sleep(30)  # —á–µ–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
        users = get_all_users()
        for user_id in users:
            try:
                bot.send_message(user_id, RESUME_MESSAGE)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
    threading.Thread(target=job, daemon=True).start()

# --- üì¨ –•–µ–Ω–¥–ª–µ—Ä—ã

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    save_user(message.from_user.id, message.from_user.username)
    bot.reply_to(message, MAINTENANCE_MESSAGE)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    save_user(message.from_user.id, message.from_user.username)
    bot.reply_to(message, MAINTENANCE_MESSAGE)

# --- üöÄ –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫

def main():
    init_db()
    schedule_broadcast()

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    print("‚è∞ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 18.06.2025 –≤ 12:00 –ú–°–ö")
    print("‚ùå –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
