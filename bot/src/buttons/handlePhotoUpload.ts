import { Telegraf, Context } from "telegraf";
import { uploadPhoto } from "../utils/api";
import { Markup } from "telegraf";
import { Message } from "telegraf/typings/core/types/typegram";

interface MySession {
  mode?: string;
  images?: string[];
}
interface MyContext extends Context {
  session: MySession;
}

export function handlePhotoUpload(bot: Telegraf) {
  bot.on("photo", async (ctx: Context) => {
    const tgId = ctx.from?.id;
    if (!tgId) return;
    const state = (ctx as MyContext).session;
    if (!state || state.mode !== "upload") {
      await ctx.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ¬ª.");
      return;
    }
    if ((state.images?.length || 0) >= 5) {
      await ctx.reply("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.");
      return;
    }
    const msg = ctx.message as Message.PhotoMessage;
    const photo = msg.photo?.slice(-1)[0];
    if (!photo) return;
    const fileId = photo.file_id;
    const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${fileId}`;
    const ok = await uploadPhoto(tgId, fileUrl);
    if (ok) {
      if (!state.images) state.images = [];
      state.images.push(fileUrl);
      await ctx.reply(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${state.images.length}/5 —Ñ–æ—Ç–æ`);
    } else {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
    }
    if (state.images.length >= 5) {
      await ctx.reply("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.");
      (ctx as MyContext).session = {};
      await ctx.reply("üéâ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!", Markup.keyboard([["üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ"], ["üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]]).resize());
    } else {
      await ctx.reply("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª.", Markup.keyboard([["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"]]).resize());
    }
  });
} 