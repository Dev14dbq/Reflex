import { Telegraf, Context } from "telegraf";
import { uploadPhoto, fetchProfile } from "../utils/api.js";
import { Markup } from "telegraf";
import { Message } from "telegraf/typings/core/types/typegram";
import { MySession } from "../types/session.js";

interface MyContext extends Context {
    session: MySession;
}

export function handlePhotoUpload(bot: Telegraf) {
    bot.on("photo", async (ctx: Context) => {
        const tgId = ctx.from?.id;
        const state = (ctx as MyContext).session;

        if (!state || state.mode !== "upload") {
            await ctx.reply("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ¬ª.");
            return;
        }

        if (state.isProcessing) {
            let attempts = 0;
            /**
             * –û–∂–∏–¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 10 –º–∏–Ω—É—Ç (120 —Ü–∏–∫–ª–æ–≤ –ø–æ 500–º—Å)
             */
            while (state.isProcessing && attempts < 120) {
                await new Promise(res => setTimeout(res, 500));
                attempts++;
            }
        }

        if ((state.images?.length || 0) >= 4) {
            await ctx.reply("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ.",
                Markup.keyboard([
                    ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"]
                ]).resize()
            );
            return;
        }

        const msg = ctx.message as Message.PhotoMessage;
        const photo = msg.photo?.slice(-1)[0];

        if (!photo) return;

        const fileId = photo.file_id;
        if (!state.images) state.images = [];
        state.isProcessing = true;

        if (!state.remaining) {
            const profile = await fetchProfile(tgId);
            const currentImages = profile?.images?.length || 0;
            state.remaining = 5 - currentImages;
        }

        try {
            if (state.images.length < 5) {
                const { ok, fileUrl } = await uploadPhoto(tgId, fileId);

                if (ok) {
                    state.images.push(fileUrl);

                    await ctx.reply(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${state.images.length} –∏–∑ ${state.remaining} —Ñ–æ—Ç–æ`);

                    if (state.images.length >= state.remaining) {
                        await ctx.reply('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ.',
                            Markup.keyboard([
                                ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"]
                            ]).resize()
                        );
                    } else {
                        if (!state.sendFinaly) await ctx.reply("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª.",
                            Markup.keyboard([
                                ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"]
                            ]).resize()
                        );

                        state.sendFinaly = true;
                    }
                } else {
                    await ctx.reply("–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.");
                }
            }
        } finally {
            state.isProcessing = false;
        }
    });
} 