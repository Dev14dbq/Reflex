import { Telegraf, Context } from "telegraf";
import { ADMIN_IDS, API_BASE } from "../config";
import axios from "axios";

export function approveAllCommand(bot: Telegraf) {
  bot.command("approveall", async (ctx: Context) => {
    if (!ctx.from || !ADMIN_IDS.includes(ctx.from.id)) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
      return;
    }
    try {
      const url = `${API_BASE}/advertising/admin/campaigns`;
      const { data } = await axios.get(url, { timeout: 10000 });
      const campaigns = data.campaigns || [];
      const pending = campaigns.filter((c: any) => c.status === "pending");
      if (!pending.length) {
        await ctx.reply("‚ùå –ù–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏");
        return;
      }
      await ctx.reply(`üîÑ –û–¥–æ–±—Ä—è—é ${pending.length} –∫–∞–º–ø–∞–Ω–∏–π...`);
      let approvedCount = 0;
      for (const campaign of pending) {
        try {
          const moderateUrl = `${API_BASE}/advertising/admin/campaigns/${campaign.id}/moderate`;
          const resp = await axios.post(moderateUrl, {
            action: "approve",
            comment: "–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ",
          });
          if (resp.status === 200) approvedCount++;
        } catch {}
      }
      await ctx.reply(`‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: ${approvedCount}`);
    } catch (e) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${e}`);
    }
  });
} 