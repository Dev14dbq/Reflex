import { Telegraf, Context } from "telegraf";
import { fetchProfile, getAdvertisement } from "../utils/api";
import { WEBAPP_URL, INTRO_PICTURE, SUPPORT_USERNAME } from "../config";
import { Markup } from "telegraf";

interface MySession {
  mode?: string;
  images?: string[];
}
interface MyContext extends Context {
  session: MySession;
}

export function startCommand(bot: Telegraf) {
  bot.start(async (ctx: Context) => {
    const tgId = ctx.from?.id;
    if (!tgId) return;
    const arg = (ctx.message && "text" in ctx.message && ctx.message.text.split(" ")[1]) || "";

    // –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –≤ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ
    if (["upload", "media"].includes(arg)) {
      (ctx as MyContext).session = { mode: "upload", images: [] };
      await ctx.reply("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∫–µ—Ç—ã. –ü–æ—Å–ª–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å.");
      return;
    }

    const profile = await fetchProfile(tgId);
    const hasProfile = !!profile;

    // Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    const replyKb = Markup.keyboard([
      ["üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ"],
      ["üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
    ]).resize();

    // –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è WebApp
    const inlineKb = Markup.inlineKeyboard([
      Markup.button.webApp("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", WEBAPP_URL),
    ]);

    let caption = "";
    if (hasProfile) {
      caption = `<b>Reflex ‚Äî –∞–Ω–æ–Ω–∏–º–Ω—ã–π LGBüåàQ —á–∞—Ç-—Ç–∏–Ω–¥–µ—Ä</b>\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\nüì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ (1-5)\nüìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –≤–æ–ø—Ä–æ—Å—ã ‚Üí @${SUPPORT_USERNAME}`;
    } else {
      caption = `<b>Reflex ‚Äî –∞–Ω–æ–Ω–∏–º–Ω—ã–π LGBüåàQ —á–∞—Ç-—Ç–∏–Ω–¥–µ—Ä</b>\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å¬ª, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!`;
    }

    await ctx.replyWithPhoto(INTRO_PICTURE, { caption, parse_mode: "HTML", ...inlineKb });
    await ctx.reply("–ú–µ–Ω—é", replyKb);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(async () => {
      const ad = await getAdvertisement(tgId);
      if (ad) {
        const adKb = Markup.inlineKeyboard([
          Markup.button.callback(ad.buttonText || "–ü–µ—Ä–µ–π—Ç–∏", `ad_click:${ad.id}`),
        ]);
        if (ad.imageUrl) {
          await ctx.replyWithPhoto(ad.imageUrl, {
            caption: `üéØ <b>${ad.title || ""}</b>\n\n${ad.description || ""}`,
            parse_mode: "HTML",
            ...adKb,
          });
        } else {
          await ctx.reply(
            `üéØ <b>${ad.title || ""}</b>\n\n${ad.description || ""}`,
            { parse_mode: "HTML", ...adKb }
          );
        }
      }
    }, 2000);
  });
} 