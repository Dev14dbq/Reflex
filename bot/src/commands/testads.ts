import { Telegraf, Context } from "telegraf";
import { ADMIN_IDS } from "../config";
import { getAdvertisement } from "../utils/api";
import { Markup } from "telegraf";

export function testAdsCommand(bot: Telegraf) {
  bot.command("testads", async (ctx: Context) => {
    if (!ctx.from || !ADMIN_IDS.includes(ctx.from.id)) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
      return;
    }
    const ad = await getAdvertisement(ctx.from.id);
    if (ad) {
      const adKb = Markup.inlineKeyboard([
        Markup.button.callback(ad.buttonText || "–ü–µ—Ä–µ–π—Ç–∏", `ad_click:${ad.id}`),
      ]);
      if (ad.imageUrl) {
        await ctx.replyWithPhoto(ad.imageUrl, {
          caption: `üéØ <b>${ad.title || ""}</b>\n\n${ad.description || ""}`,
          parse_mode: "HTML",
          ...adKb,
        });
      } else {
        await ctx.reply(
          `üéØ <b>${ad.title || ""}</b>\n\n${ad.description || ""}`,
          { parse_mode: "HTML", ...adKb }
        );
      }
      await ctx.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
    } else {
      await ctx.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã");
    }
  });
} 