import React, { useState, useEffect } from 'react';
import { EditModal } from '../ui/EditModal';

interface EditGoalsModalProps {
  isOpen: boolean;
  onClose: () => void;
  currentGoals: string[];
  onSave: (goals: string[]) => void;
}

const goalOptions = [
  { value: '—Å–µ–∫—Å', label: '–°–µ–∫—Å', icon: 'üî•' },
  { value: '–æ–±–º–µ–Ω —Ñ–æ—Ç–æ', label: '–û–±–º–µ–Ω —Ñ–æ—Ç–æ', icon: 'üì∏' },
  { value: '–æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏', label: '–û—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏', icon: 'üíï' },
  { value: '–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ', label: '–û—Ç–Ω–æ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ', icon: '‚ù§Ô∏è' },
  { value: '–æ–±—â–µ–Ω–∏–µ', label: '–û–±—â–µ–Ω–∏–µ', icon: 'üí¨' }
];

export const EditGoalsModal: React.FC<EditGoalsModalProps> = ({
  isOpen,
  onClose,
  currentGoals,
  onSave
}) => {
  const [goals, setGoals] = useState<string[]>(currentGoals);

  useEffect(() => {
    setGoals(currentGoals);
  }, [currentGoals, isOpen]);

  const handleSave = () => {
    onSave(goals);
    onClose();
  };

  const toggleGoal = (goal: string) => {
    setGoals(prev => 
      prev.includes(goal) 
        ? prev.filter(g => g !== goal)
        : prev.length < 3
        ? [...prev, goal]
        : prev
    );
  };

  return (
    <EditModal
      isOpen={isOpen}
      onClose={onClose}
      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–∏"
      onSave={handleSave}
      saveDisabled={goals.length === 0}
      rules="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
    >
      <div className="space-y-3">
        <label className="block text-sm font-medium neu-text-primary">
          –¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
        </label>
        <div className="space-y-2">
          {goalOptions.map((option) => (
            <label
              key={option.value}
              className="flex items-center space-x-3 p-3 rounded-neu-md bg-neu-surface-subtle cursor-pointer hover:bg-neu-surface-hover transition-colors"
            >
              <input
                type="checkbox"
                checked={goals.includes(option.value)}
                onChange={() => toggleGoal(option.value)}
                className="w-4 h-4 text-neu-primary focus:ring-neu-primary rounded"
              />
              <span className="text-2xl">{option.icon}</span>
              <span className="neu-text-primary font-medium">{option.label}</span>
            </label>
          ))}
        </div>
        <p className="text-sm neu-text-muted">
          –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ({goals.length}/3)
        </p>
        {goals.length === 0 && (
          <p className="text-sm text-red-500">
            –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å
          </p>
        )}
      </div>
    </EditModal>
  );
}; 