import { useCallback, useEffect, useRef, useState } from 'react';
import { WSMessage, ChatEvent } from '../pages/Chat/types';
import { config } from '../config/env';

interface UseChatWebSocketProps {
  token: string | null;
  onEvent: (event: ChatEvent) => void;
}

interface PendingRequest {
  resolve: (value: any) => void;
  reject: (error: any) => void;
  timestamp: number;
  timeout: NodeJS.Timeout;
}

export const useChatWebSocket = ({ token, onEvent }: UseChatWebSocketProps) => {
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  
  const wsRef = useRef<WebSocket | null>(null);
  const pendingRequests = useRef<Map<number, PendingRequest>>(new Map());
  const requestIdRef = useRef(1);
  const heartbeatIntervalRef = useRef<NodeJS.Timeout>();
  const subscriptionsRef = useRef<Set<string>>(new Set());
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();
  const currentTokenRef = useRef<string | null>(null);

  // –û—á–∏—Å—Ç–∫–∞ heartbeat
  const clearHeartbeat = useCallback(() => {
    if (heartbeatIntervalRef.current) {
      clearInterval(heartbeatIntervalRef.current);
      heartbeatIntervalRef.current = undefined;
    }
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ reconnect timeout
  const clearReconnectTimeout = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = undefined;
    }
  }, []);

  // –ó–∞–ø—É—Å–∫ heartbeat
  const startHeartbeat = useCallback(() => {
    clearHeartbeat();
    heartbeatIntervalRef.current = setInterval(() => {
      if (wsRef.current?.readyState === WebSocket.OPEN) {
        wsRef.current.send(JSON.stringify({ action: 'ping' }));
      }
    }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }, [clearHeartbeat]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ RPC –∑–∞–ø—Ä–æ—Å–∞
  const sendRPC = useCallback((action: string, params?: any): Promise<any> => {
    return new Promise((resolve, reject) => {
      if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'));
        return;
      }

      const id = requestIdRef.current++;
      const message: WSMessage = { id, action, params };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      pendingRequests.current.set(id, {
        resolve,
        reject,
        timestamp: Date.now(),
        timeout: setTimeout(() => {
          const pending = pendingRequests.current.get(id);
          if (pending) {
            pendingRequests.current.delete(id);
            pending.reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
          }
        }, 10000)
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      wsRef.current.send(JSON.stringify(message));
    });
  }, []);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
  const connect = useCallback(() => {
    if (!token) {
      console.log('[Chat WS] üö´ –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      setConnectionError('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      if (!payload.exp || payload.exp * 1000 < Date.now()) {
        console.log('[Chat WS] ‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
        setConnectionError('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫');
        return;
      }
    } catch (e) {
      console.log('[Chat WS] ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
      setConnectionError('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–æ–∫–µ–Ω
    if (currentTokenRef.current === token && wsRef.current?.readyState === WebSocket.OPEN) {
      console.log('[Chat WS] ‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å —Ç–µ–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º');
      return; // –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å —Ç–µ–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º
    }

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (currentTokenRef.current !== token && wsRef.current) {
      console.log('[Chat WS] üîÑ –¢–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è');
      wsRef.current.close(1000, '–°–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞');
    }

    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (isConnecting) {
      console.log('[Chat WS] ‚è≥ –£–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –∂–¥–µ–º...');
      return;
    }

    currentTokenRef.current = token;
    setIsConnecting(true);
    setConnectionError(null);
    clearReconnectTimeout();

    try {
      const ws = new WebSocket(`${config.WS_URL}/chat?token=${token}`);
      wsRef.current = ws;

      ws.onopen = () => {
        console.log('[Chat WS] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        setIsConnected(true);
        setIsConnecting(false);
        setConnectionError(null);
        startHeartbeat();
        console.log('[Chat WS] üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      };

      ws.onmessage = (event) => {
        try {
          const message: WSMessage = JSON.parse(event.data);
          console.log('[Chat WS] üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          if (message.event === 'authenticated') {
            if (message.payload?.success) {
              setIsConnected(true);
              setIsConnecting(false);
              setConnectionError(null);
              startHeartbeat();
              console.log('[Chat WS] üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
            } else {
              setConnectionError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
              setIsConnecting(false);
              ws.close();
            }
            return;
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ pong
          if (message.event === 'pong') {
            console.log('[Chat WS] üíì Pong –ø–æ–ª—É—á–µ–Ω');
            return;
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ RPC –æ—Ç–≤–µ—Ç–æ–≤
          if (message.id && pendingRequests.current.has(message.id)) {
            const pending = pendingRequests.current.get(message.id)!;
            clearTimeout(pending.timeout);
            pendingRequests.current.delete(message.id);

            if (message.error) {
              console.log('[Chat WS] ‚ùå RPC –æ—à–∏–±–∫–∞:', message.error);
              pending.reject(new Error(message.error.message));
            } else {
              console.log('[Chat WS] ‚úÖ RPC —É—Å–ø–µ—Ö:', message.result);
              pending.resolve(message.result);
            }
            return;
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
          if (message.event && message.payload) {
            onEvent(message as ChatEvent);
          }

        } catch (error) {
          console.error('[Chat WS] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };

      ws.onerror = (error) => {
        console.error('[Chat WS] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∏–∑-–∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if (ws.readyState === WebSocket.CLOSED) {
          setConnectionError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        } else {
          setConnectionError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }
        setIsConnecting(false);
      };

      ws.onclose = (event) => {
        console.warn('[Chat WS] üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
        setIsConnected(false);
        setIsConnecting(false);
        clearHeartbeat();
        
        // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ pending –∑–∞–ø—Ä–æ—Å—ã
        pendingRequests.current.forEach(pending => {
          clearTimeout(pending.timeout);
          pending.reject(new Error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ'));
        });
        pendingRequests.current.clear();

        if (event.code === 1008) {
          setConnectionError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        } else if (event.code !== 1000 && event.reason !== '–°–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞') {
          setConnectionError('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ');
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞)
          if (token && currentTokenRef.current === token) {
            console.log('[Chat WS] üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
            reconnectTimeoutRef.current = setTimeout(() => {
              if (currentTokenRef.current === token) {
                connect();
              }
            }, 3000);
          }
        }
      };

    } catch (error) {
      console.error('[Chat WS] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
      setConnectionError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      setIsConnecting(false);
    }
  }, [token, startHeartbeat, onEvent, isConnecting, clearReconnectTimeout]);

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  const disconnect = useCallback(() => {
    console.log('[Chat WS] üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
    clearHeartbeat();
    clearReconnectTimeout();
    subscriptionsRef.current.clear();
    currentTokenRef.current = null;
    
    if (wsRef.current) {
      wsRef.current.close(1000, '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞');
      wsRef.current = null;
    }
    
    setIsConnected(false);
    setIsConnecting(false);
  }, [clearHeartbeat, clearReconnectTimeout]);

  // API –º–µ—Ç–æ–¥—ã
  const getChats = useCallback((limit = 20, cursor?: string) => {
    return sendRPC('getChats', { limit, cursor });
  }, [sendRPC]);

  const openChat = useCallback((chatId: string) => {
    return sendRPC('openChat', { chatId });
  }, [sendRPC]);

  const getMessages = useCallback((chatId: string, limit = 30, cursor?: string) => {
    return sendRPC('getMessages', { chatId, limit, cursor });
  }, [sendRPC]);

  const sendMessage = useCallback((chatId: string, text: string) => {
    return sendRPC('sendMessage', { chatId, text, type: 'text' });
  }, [sendRPC]);

  const editMessage = useCallback((messageId: string, text: string) => {
    return sendRPC('editMessage', { messageId, text });
  }, [sendRPC]);

  const deleteMessage = useCallback((messageId: string, scope: 'self' | 'both' = 'self') => {
    return sendRPC('deleteMessage', { messageId, scope });
  }, [sendRPC]);

  const subscribe = useCallback((chatId: string) => {
    if (subscriptionsRef.current.has(chatId)) return;
    subscriptionsRef.current.add(chatId);
    return sendRPC('subscribe', { chatId });
  }, [sendRPC]);

  const unsubscribe = useCallback((chatId: string) => {
    subscriptionsRef.current.delete(chatId);
    return sendRPC('unsubscribe', { chatId });
  }, [sendRPC]);

  const markRead = useCallback((chatId: string, messageIds: string[]) => {
    return sendRPC('markRead', { chatId, messageIds });
  }, [sendRPC]);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ (–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å)
  useEffect(() => {
    if (token && currentTokenRef.current !== token) {
      console.log('[Chat WS] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º');
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
      const timeoutId = setTimeout(() => {
        connect();
      }, 100);
      
      return () => clearTimeout(timeoutId);
    } else if (!token) {
      console.log('[Chat WS] üö´ –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è');
      disconnect();
    }
  }, [token, connect, disconnect]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('[Chat WS] üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
      clearHeartbeat();
      clearReconnectTimeout();
      if (wsRef.current) {
        wsRef.current.close(1000, '–†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
      }
    };
  }, [clearHeartbeat, clearReconnectTimeout]);

  return {
    isConnected,
    isConnecting,
    connectionError,
    connect,
    disconnect,
    // API methods
    getChats,
    openChat,
    getMessages,
    sendMessage,
    editMessage,
    deleteMessage,
    subscribe,
    unsubscribe,
    markRead
  };
}; 