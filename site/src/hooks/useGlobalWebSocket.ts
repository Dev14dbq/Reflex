import { useCallback, useEffect, useState } from 'react';
import { WSMessage, ChatEvent } from '../pages/Chat/types';
import { useUserStore } from '../stores/user';
import { config } from '../config/env';

interface PendingRequest {
  resolve: (value: any) => void;
  reject: (error: any) => void;
  timestamp: number;
  timeout: NodeJS.Timeout;
}

interface WebSocketStore {
  isConnected: boolean;
  isConnecting: boolean;
  connectionError: string | null;
  eventListeners: Set<(event: ChatEvent) => void>;
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket
let globalWebSocketState: WebSocketStore = {
  isConnected: false,
  isConnecting: false,
  connectionError: null,
  eventListeners: new Set()
};

let wsRef: WebSocket | null = null;
let pendingRequests = new Map<number, PendingRequest>();
let requestIdRef = 1;
let heartbeatIntervalRef: NodeJS.Timeout | undefined;
let reconnectTimeoutRef: NodeJS.Timeout | undefined;
let currentTokenRef: string | null = null;

// –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
const stateSubscribers = new Set<(state: WebSocketStore) => void>();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
const notifyStateChange = () => {
  stateSubscribers.forEach(callback => callback({ ...globalWebSocketState }));
};

// –û—á–∏—Å—Ç–∫–∞ heartbeat
const clearHeartbeat = () => {
  if (heartbeatIntervalRef) {
    clearInterval(heartbeatIntervalRef);
    heartbeatIntervalRef = undefined;
  }
};

// –û—á–∏—Å—Ç–∫–∞ reconnect timeout
const clearReconnectTimeout = () => {
  if (reconnectTimeoutRef) {
    clearTimeout(reconnectTimeoutRef);
    reconnectTimeoutRef = undefined;
  }
};

// –ó–∞–ø—É—Å–∫ heartbeat
const startHeartbeat = () => {
  clearHeartbeat();
  heartbeatIntervalRef = setInterval(() => {
    if (wsRef?.readyState === WebSocket.OPEN) {
      wsRef.send(JSON.stringify({ action: 'ping' }));
    }
  }, 30000);
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ RPC –∑–∞–ø—Ä–æ—Å–∞
const sendRPC = (action: string, params?: any): Promise<any> => {
  return new Promise((resolve, reject) => {
    if (!wsRef || wsRef.readyState !== WebSocket.OPEN) {
      reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'));
      return;
    }

    const id = requestIdRef++;
    const message: WSMessage = { id, action, params };
    
    pendingRequests.set(id, {
      resolve,
      reject,
      timestamp: Date.now(),
      timeout: setTimeout(() => {
        const pending = pendingRequests.get(id);
        if (pending) {
          pendingRequests.delete(id);
          pending.reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
        }
      }, 20000) // 20 –°–µ–∫—É–Ω–¥
    });

    wsRef.send(JSON.stringify(message));
  });
};

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
const connectWebSocket = (token: string) => {
  if (!token) {
    console.log('[Global WS] üö´ –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    globalWebSocketState.connectionError = '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
    notifyStateChange();
    return;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    if (!payload.exp || payload.exp * 1000 < Date.now()) {
      console.log('[Global WS] ‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
      globalWebSocketState.connectionError = '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫';
      notifyStateChange();
      return;
    }
  } catch (e) {
    console.log('[Global WS] ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
    globalWebSocketState.connectionError = '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
    notifyStateChange();
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–æ–∫–µ–Ω
  if (currentTokenRef === token && wsRef?.readyState === WebSocket.OPEN) {
    console.log('[Global WS] ‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å —Ç–µ–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º');
    return;
  }

  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  if (currentTokenRef !== token && wsRef) {
    console.log('[Global WS] üîÑ –¢–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è');
    wsRef.close(1000, '–°–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞');
  }

  // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  if (globalWebSocketState.isConnecting) {
    console.log('[Global WS] ‚è≥ –£–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –∂–¥–µ–º...');
    return;
  }

  currentTokenRef = token;
  globalWebSocketState.isConnecting = true;
  globalWebSocketState.connectionError = null;
  clearReconnectTimeout();
  notifyStateChange();

  try {
    const ws = new WebSocket(`${config.WS_URL}/chat?token=${token}`);
    wsRef = ws;

    ws.onopen = () => {
      console.log('[Global WS] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      globalWebSocketState.isConnected = true;
      globalWebSocketState.isConnecting = false;
      globalWebSocketState.connectionError = null;
      startHeartbeat();
      notifyStateChange();
    };

    ws.onmessage = (event) => {
      try {
        const message: WSMessage = JSON.parse(event.data);
        console.log('[Global WS] üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (message.event === 'authenticated') {
          if (message.payload?.success) {
            globalWebSocketState.isConnected = true;
            globalWebSocketState.isConnecting = false;
            globalWebSocketState.connectionError = null;
            startHeartbeat();
            notifyStateChange();
          } else {
            globalWebSocketState.connectionError = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
            globalWebSocketState.isConnecting = false;
            notifyStateChange();
            ws.close();
          }
          return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ pong
        if (message.event === 'pong') return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ RPC –æ—Ç–≤–µ—Ç–æ–≤
        if (message.id && pendingRequests.has(message.id)) {
          const pending = pendingRequests.get(message.id)!;
          clearTimeout(pending.timeout);
          pendingRequests.delete(message.id);

          if (message.error) {
            console.log('[Global WS] ‚ùå RPC –æ—à–∏–±–∫–∞:', message.error);
            pending.reject(new Error(message.error.message));
          } else {
            console.log('[Global WS] ‚úÖ RPC —É—Å–ø–µ—Ö:', message.result);
            pending.resolve(message.result);
          }
          return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        if (message.event && message.payload) {
          globalWebSocketState.eventListeners.forEach(listener => {
            try {
              listener(message as ChatEvent);
            } catch (error) {
              console.error('[Global WS] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è:', error);
            }
          });
        }

      } catch (error) {
        console.error('[Global WS] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    };

    ws.onerror = (error) => {
      console.error('[Global WS] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      
      if (ws.readyState === WebSocket.CLOSED) {
        globalWebSocketState.connectionError = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      } else {
        globalWebSocketState.connectionError = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      }
      globalWebSocketState.isConnecting = false;
      notifyStateChange();
    };

    ws.onclose = (event) => {
      console.warn('[Global WS] üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
      globalWebSocketState.isConnected = false;
      globalWebSocketState.isConnecting = false;
      clearHeartbeat();
      notifyStateChange();
      
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ pending –∑–∞–ø—Ä–æ—Å—ã
      pendingRequests.forEach(pending => {
        clearTimeout(pending.timeout);
        pending.reject(new Error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ'));
      });
      pendingRequests.clear();

      if (event.code === 1008) {
        globalWebSocketState.connectionError = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
        notifyStateChange();
      } else if (event.code !== 1000 && event.reason !== '–°–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞') {
        globalWebSocketState.connectionError = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ';
        notifyStateChange();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        if (token && currentTokenRef === token) {
          console.log('[Global WS] üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
          reconnectTimeoutRef = setTimeout(() => {
            if (currentTokenRef === token) {
              connectWebSocket(token);
            }
          }, 3000);
        }
      }
    };

  } catch (error) {
    console.error('[Global WS] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
    globalWebSocketState.connectionError = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
    globalWebSocketState.isConnecting = false;
    notifyStateChange();
  }
};

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
const disconnectWebSocket = () => {
  console.log('[Global WS] üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
  clearHeartbeat();
  clearReconnectTimeout();
  currentTokenRef = null;
  
  if (wsRef) {
    wsRef.close(1000, '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞');
    wsRef = null;
  }
  
  globalWebSocketState.isConnected = false;
  globalWebSocketState.isConnecting = false;
  globalWebSocketState.eventListeners.clear();
  notifyStateChange();
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ WebSocket
export const useGlobalWebSocket = () => {
  const [state, setState] = useState(globalWebSocketState);
  const { token, isInitialized } = useUserStore();
  const isTokenReady = isInitialized && !!token;

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    const handleStateChange = (newState: WebSocketStore) => {
      setState(newState);
    };

    stateSubscribers.add(handleStateChange);
    return () => {
      stateSubscribers.delete(handleStateChange);
    };
  }, []);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  useEffect(() => {
    if (isTokenReady && token && currentTokenRef !== token) {
      console.log('[Global WS] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º');
      const timeoutId = setTimeout(() => {
        connectWebSocket(token);
      }, 100);
      
      return () => clearTimeout(timeoutId);
    } else if (!token) {
      console.log('[Global WS] –¢–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –í—ã–ø–æ–ª–Ω—è—é –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ!');
      disconnectWebSocket();
    }
  }, [token, isTokenReady]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫)
  useEffect(() => {
    return () => {
      // –ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º WebSocket –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    };
  }, []);

  // API –º–µ—Ç–æ–¥—ã
  const getChats = useCallback((limit = 20, cursor?: string) => {
    return sendRPC('getChats', { limit, cursor });
  }, []);

  const openChat = useCallback((chatId: string) => {
    return sendRPC('openChat', { chatId });
  }, []);

  const getMessages = useCallback((chatId: string, limit = 30, cursor?: string) => {
    return sendRPC('getMessages', { chatId, limit, cursor });
  }, []);

  const sendMessage = useCallback((chatId: string, text: string) => {
    return sendRPC('sendMessage', { chatId, text, type: 'text' });
  }, []);

  const editMessage = useCallback((messageId: string, text: string) => {
    return sendRPC('editMessage', { messageId, text });
  }, []);

  const deleteMessage = useCallback((messageId: string, scope: 'self' | 'both' = 'self') => {
    return sendRPC('deleteMessage', { messageId, scope });
  }, []);

  const subscribe = useCallback((chatId: string) => {
    return sendRPC('subscribe', { chatId });
  }, []);

  const unsubscribe = useCallback((chatId: string) => {
    return sendRPC('unsubscribe', { chatId });
  }, []);

  const markRead = useCallback((chatId: string, messageIds: string[]) => {
    return sendRPC('markRead', { chatId, messageIds });
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
  const addEventListener = useCallback((listener: (event: ChatEvent) => void) => {
    globalWebSocketState.eventListeners.add(listener);
    return () => {
      globalWebSocketState.eventListeners.delete(listener);
    };
  }, []);

  const connect = useCallback(() => {
    if (token) {
      connectWebSocket(token);
    }
  }, [token]);

  const disconnect = useCallback(() => {
    disconnectWebSocket();
  }, []);

  return {
    isConnected: state.isConnected,
    isConnecting: state.isConnecting,
    connectionError: state.connectionError,
    isTokenReady,
    connect,
    disconnect,
    addEventListener,
    // API methods
    getChats,
    openChat,
    getMessages,
    sendMessage,
    editMessage,
    deleteMessage,
    subscribe,
    unsubscribe,
    markRead
  };
}; 