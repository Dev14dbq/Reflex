import axios from "axios";
import React, { useEffect, useState } from "react";
import { Outlet, useLocation, useNavigate } from "react-router-dom";

import { CityMigration } from "@page/CityMigration/CityMigration";
import { ErrorCard, AdCard, BannedScreen } from "@components/ui";
import { useGlobalWebSocket } from "@hooks/useGlobalWebSocket";
import { useAdvertising } from "@hooks/useAdvertising";
import { BottomLayout } from "./BottomLayout";
import { useUserStore } from "@stores/user";

import { config } from "@env";
import api from '@api';

interface MainLayoutProps {
  children?: React.ReactNode;
}

export const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
  const location = useLocation();
  const navigate = useNavigate();

  const { user, token, isAuthenticated, isInitialized, hasProfile, setUser, setToken, setInitialized, setHasProfile, logout } = useUserStore();

  const [loading, setLoading] = useState(!isInitialized);
  const [error, setError] = useState<string | null>(null);
  const [needsCityMigration, setNeedsCityMigration] = useState(false);

  const [authRetryCount, setAuthRetryCount] = useState(0);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π WebSocket
  useGlobalWebSocket();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º—É
  const {
    currentAd,
    showWelcomeAd,
    trackImpression,
    trackClick,
    closeAd
  } = useAdvertising();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ store
  const noProfile = hasProfile === false;

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  useEffect(() => {
    console.log('[MainLayout] State:', {
      isInitialized,
      hasUser: !!user,
      hasToken: !!token,
      hasProfile,
      loading,
      noProfile,
      pathname: location.pathname
    });
  }, [isInitialized, user, token, hasProfile, loading, noProfile, location.pathname]);

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp SDK
   */
  useEffect(() => {
    if ((window as any).Telegram?.WebApp) {
      (window as any).Telegram.WebApp.ready?.();
      (window as any).Telegram.WebApp.expand?.();
    }
  }, []);

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const initializeAuth = async () => {
      if (isInitialized) return;

      const storedToken = localStorage.getItem("token");
      if (!storedToken) {
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã Telegram WebApp —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        setTimeout(() => {
          authWithTelegram();
        }, 500);
        return;
      }

      try {
        const response = await api.get("/me", {
          headers: {
            Authorization: `Bearer ${storedToken}`
          },
        });

        if (response.ok) {
          const userData = await response.json();
          setUser(userData.user);
          setToken(storedToken);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
          const profileResponse = await api.get("/profile/me", {
            headers: {
              Authorization: `Bearer ${storedToken}`
            },
          });
          
          console.log('[Init] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', {
            status: profileResponse.status,
            ok: profileResponse.ok
          });
          
          if (profileResponse.ok) {
            const profileData = await profileResponse.json();
            console.log('[Init] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', {
              hasProfile: !!profileData.profile,
              city: profileData.profile?.city
            });
            setHasProfile(!!profileData.profile);
          } else if (profileResponse.status === 404) {
            console.log('[Init] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
            setHasProfile(false);
          } else {
            console.error('[Init] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileResponse.status);
            const errorText = await profileResponse.text().catch(() => 'Unknown error');
            console.error('[Init] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorText);
            setHasProfile(false);
          }
        } else {
          localStorage.removeItem("token");
          setToken(null);
        }
      } catch (error) {
        console.error("Auth initialization error:", error);
        localStorage.removeItem("token");
        setToken(null);
      } finally {
        setInitialized(true);
        setLoading(false);
      }
    };

    initializeAuth();
  }, [isInitialized, setUser, setToken, setInitialized, setHasProfile]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∫–ª–∞–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (isInitialized && !loading && user && hasProfile) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é
      const timer = setTimeout(() => {
        showWelcomeAd();
      }, 3000);
      
      return () => clearTimeout(timer);
    }
  }, [isInitialized, user, hasProfile]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    if (!isInitialized || loading) return; // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    if (noProfile && location.pathname !== "/register") {
      navigate("/register", { replace: true });
    } else if (!noProfile && user && location.pathname === "/register") {
      navigate("/", { replace: true });
    }
  }, [location.pathname, noProfile, isInitialized, loading, navigate, user]);

  /** –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å, –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç */
  const verifyProfile = async (token: string, retry = false) => {
    try {
      console.log('[VerifyProfile] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å...', { retry });
      const res: any = await api.get(`/profile/me`, {
        headers: {
          Authorization: `Bearer ${token}`
        },
      });

      if (!res.data?.profile) {
        console.log('[VerifyProfile] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ');
        // treat as no profile
        setHasProfile(false);
        setLoading(false);
        return;
      }

      console.log('[VerifyProfile] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω');
      setLoading(false);
      setHasProfile(true);
    } catch (err: any) {
      console.log('[VerifyProfile] ‚ùå –û—à–∏–±–∫–∞:', err.response?.status);
      
      if (err.response?.status === 404) {
        if (!retry) {
          console.log('[VerifyProfile] üîÑ –ü–µ—Ä–≤–∞—è 404, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 800–º—Å...');
          // –ø–µ—Ä–≤–∞—è 404 ‚Äì –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑
          setTimeout(() => verifyProfile(token, true), 800);
        } else {
          console.log('[VerifyProfile] ‚ùå –í—Ç–æ—Ä–∞—è 404, –ø—Ä–æ—Ñ–∏–ª—è —Ç–æ—á–Ω–æ –Ω–µ—Ç');
          // –≤—Ç–æ—Ä–∞—è 404 ‚Äî –ø—Ä–æ—Ñ–∏–ª—è —Ç–æ—á–Ω–æ –Ω–µ—Ç
          setHasProfile(false);
          setLoading(false);
        }
        return;
      }

      if (err.response?.status === 401 || err.response?.status === 403) {
        console.warn("[VerifyProfile] ‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", err);
        logout();
        setInitialized(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        authWithTelegram();
      } else {
        console.error("[VerifyProfile] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
        setError("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        setLoading(false);
      }
    }
  };

  /** –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */


  const authWithTelegram = async (retryCount = 0): Promise<void> => {
    const maxRetries = 3;
    setAuthRetryCount(retryCount);
    console.log(`[Auth] –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ${retryCount + 1}/${maxRetries + 1}`);

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –µ—Å–ª–∏ —ç—Ç–æ retry, —á—Ç–æ–±—ã Telegram WebApp —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    if (retryCount > 0) {
      await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));
    }

    const tgWebApp = (window as any).Telegram?.WebApp;
    const raw = tgWebApp?.initData;
    
    console.log('[Auth] WebApp —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
      webAppExists: !!tgWebApp,
      initDataExists: !!raw,
      initDataLength: raw?.length || 0,
      isReady: tgWebApp?.isReady
    });

    if (!raw) {
      if (retryCount < maxRetries) {
        console.log(`[Auth] InitData –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${(retryCount + 1) * 1000}–º—Å...`);
        return authWithTelegram(retryCount + 1);
      }
      
      console.warn("[Auth] ‚ùå InitData –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫");
      setError("tg-init-missing");
      setLoading(false);
      setInitialized(true);
      return;
    }

    try {
      console.log('[Auth] üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      const response = await axios.post(`${config.API_URL}/auth/by-initdata`, 
        { initData: raw },
        { timeout: 10000 } // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      );

      console.log('[Auth] ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      setToken(response.data.token);
      setUser(response.data.user);
      setError(null);

      console.log('[Auth] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      verifyProfile(response.data.token);
      
    } catch (err: any) {
      console.error(`[Auth] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${retryCount + 1}:`, err);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
      if ((err.code === 'NETWORK_ERROR' || err.code === 'ECONNABORTED' || !err.response) && retryCount < maxRetries) {
        console.log(`[Auth] üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${(retryCount + 1) * 1000}–º—Å...`);
        return authWithTelegram(retryCount + 1);
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      if (err.response?.status === 409 && err.response?.data?.code === "CLEAR_STORAGE") {
        localStorage.clear();
        sessionStorage.clear();
        setError("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        setTimeout(() => window.location.reload(), 3000);
      } else if (err.response?.status >= 500 && retryCount < maxRetries) {
        console.log(`[Auth] üîÑ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${(retryCount + 1) * 1000}–º—Å...`);
        return authWithTelegram(retryCount + 1);
      } else if (retryCount >= maxRetries) {
        console.error(`[Auth] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã`);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
      } else {
        setError("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      }
      
      setLoading(false);
    } finally {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isInitialized=true –≤ –∫–æ–Ω—Ü–µ
      console.log('[Auth] üèÅ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isInitialized=true');
      setInitialized(true);
    }
  };

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—à–∏–±–∫–∏
  const renderError = () => {
    if (error === "network") {
      return (
        <ErrorCard
          title="–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
          description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
          onRetry={() => window.location.reload()}
          retryText="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å"
        />
      );
    }
    if (error === "tg-init-missing") {
      return (
        <ErrorCard
          title="Telegram –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ"
          description="–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª –≤ Telegram"
          onRetry={() => window.location.href = config.BOT_URL}
          retryText="–ó–∞–ø—É—Å—Ç–∏—Ç—å"
        />
      );
    }
    return (
      <ErrorCard
        title="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        description={error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}
        onRetry={() => {
          setError(null);
          setInitialized(false);
          authWithTelegram();
        }}
      />
    );
  };

  const routesWithBottom = ["/", "/search", "/settings", "/likes", "/chats"];
  const useBottomLayout = routesWithBottom.includes(location.pathname);

  if (loading || !isInitialized) {
    let loadingMessage = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è... –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É";
    if (authRetryCount > 0) {
      loadingMessage = `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... –ü–æ–ø—ã—Ç–∫–∞ ${authRetryCount + 1}`;
    }

    return (
      <div className="min-h-screen bg-neu-bg-primary flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-neu-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="neu-text-secondary">
            {loadingMessage}
          </p>
          {authRetryCount > 0 && (
            <p className="neu-text-muted text-xs mt-2">
              –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø–æ–≤—Ç–æ—Ä—è–µ–º...
            </p>
          )}
          <p className="neu-text-muted text-xs mt-2">
            isInitialized: {isInitialized ? 'true' : 'false'}, loading: {loading ? 'true' : 'false'}
          </p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center p-6">
        {renderError()}
      </div>
    );
  }

  if (!isAuthenticated || !user) {
    return <>{children || <Outlet />}</>;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (user.blocked) {
    return (
      <BannedScreen 
        blockReason={user.blockReason} 
        blockedAt={user.blockedAt} 
      />
    );
  }

  if (!hasProfile) {
    return <>{children || <Outlet />}</>;
  }

  if (needsCityMigration) {
    return <CityMigration />;
  }

  return useBottomLayout ? (
    <BottomLayout>
      {children || <Outlet />}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∫–ª–∞–º–æ–π */}
      {currentAd && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="relative max-w-sm w-full">
            <button
              onClick={closeAd}
              className="absolute -top-2 -right-2 w-8 h-8 bg-gray-800 text-white rounded-full flex items-center justify-center text-lg font-bold z-10 hover:bg-gray-700"
            >
              √ó
            </button>
            <AdCard
              ad={currentAd}
              onImpression={trackImpression}
              onClick={trackClick}
            />
          </div>
        </div>
      )}
    </BottomLayout>
  ) : (
    <>
      {children || <Outlet />}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∫–ª–∞–º–æ–π */}
      {currentAd && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="relative max-w-sm w-full">
            <button
              onClick={closeAd}
              className="absolute -top-2 -right-2 w-8 h-8 bg-gray-800 text-white rounded-full flex items-center justify-center text-lg font-bold z-10 hover:bg-gray-700"
            >
              √ó
            </button>
            <AdCard
              ad={currentAd}
              onImpression={trackImpression}
              onClick={trackClick}
            />
          </div>
        </div>
      )}
    </>
  );
};
